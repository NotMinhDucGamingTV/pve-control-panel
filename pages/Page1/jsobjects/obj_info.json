{
  "unpublishedCollection": {
    "name": "obj_info",
    "pageId": "Page1",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tstatus: () => {\n\t\tif (status_.data.data.status == \"running\"){\n\t\t\treturn \"Tændt/online\"\n\t\t}else{return \"Stoppet/offline\"}\n\t\t},\n\tserverid: () => {\n\t\treturn status_.data.data.name\n\t\t},\n\tuptime: () => {\n\tfunction secondsToString(seconds)\n\t\t{\n\t\tvar numdays = Math.floor((seconds % 31536000) / 86400); \n\t\tvar numhours = Math.floor(((seconds % 31536000) % 86400) / 3600);\n\t\tvar numminutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);\n\t\tvar numseconds = (((seconds % 31536000) % 86400) % 3600) % 60;\n\t\treturn numdays + \" dag(e) \" + numhours + \" time(r) \" + numminutes + \" minut(ter) \" + numseconds + \" sekund(er)\";\n\t\t}\n\t\treturn secondsToString(status_.data.data.uptime)\n\t},\n\tmaxram: () => {\n    function formatBytes(bytes, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n   }\n\t return formatBytes(status_.data.data.maxmem)\n},\n\tmaxssd: () => {\n    function formatBytes(bytes, decimals = 2) {\n    if (bytes === 0) return '0 Bytes';\n\n    const k = 1024;\n    const dm = decimals < 0 ? 0 : decimals;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n   }\n\t return formatBytes(status_.data.data.maxdisk)\n},\n\tusedram: () => {\n\t\tvar res = status_.data.data.mem / status_.data.data.maxmem * 100\n\t\treturn Math.round(res * 100) / 100\n\t\t},\n\tusedcpu: () => {\n\t\tvar res = status_.data.data.cpu / status_.data.data.cpus * status_.data.data.cpus * 100\n\t\treturn Math.round(res * 100) / 100\n\t},\n\t\tusedssd: () => {\n\t\tvar res = status_.data.data.disk / status_.data.data.maxdisk * 100\n\t\treturn Math.round(res * 100) / 100\n\t},\n\t  datacenter: () => {\n\t\tif (obj_var.current_node() == \"proxmox\") {return \"dk-sorø-1\"} else{return \"dk-roskilde-1\"}\n\t}\n}\n\n",
    "variables": []
  },
  "id": "Page1_obj_info",
  "deleted": false,
  "gitSyncId": "6241e0cb03598d2fae790df2_624211b103598d2fae790e3c"
}